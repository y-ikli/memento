{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"clean_code/memento_clean_code/","title":"Memento Clean Code","text":""},{"location":"docker/memento_docker/","title":"Memento Docker","text":""},{"location":"git/memento_git/","title":"Memento Git","text":""},{"location":"python/memento_python/","title":"Memento Python","text":""},{"location":"python/memento_python/#advanced-python-core","title":"Advanced Python Core","text":"<p>This memento summarizes some native Python features with structured examples.</p>"},{"location":"python/memento_python/#type-hints-static-checking","title":"Type Hints &amp; Static Checking","text":"<p>Type hints help document your code and catch bugs early. Combined with tools like <code>mypy</code>, they enable static analysis without running the code.</p>"},{"location":"python/memento_python/#basic-type-hints","title":"Basic Type Hints","text":"<pre><code>def double(x: int) -&gt; int:\n    return x * 2\n\ndef greet(name: str) -&gt; str:\n    return f\"Hello, {name}\"\n</code></pre>"},{"location":"python/memento_python/#hints-for-collections","title":"Hints for Collections","text":"<pre><code>from typing import List, Dict\n\ndef total(prices: List[float]) -&gt; float:\n    return sum(prices)\n\ndef extract_ids(data: List[Dict[str, int]]) -&gt; List[int]:\n    return [row[\"id\"] for row in data]\n</code></pre> <ul> <li>In first example prices are a list of floats.</li> <li>In the second example, data is expected to be a list of dictionaries.Each dictionary maps strings to integers  This means you expect something like: <code>[{\"id\": 1}, {\"id\": 2}, {\"id\": 3}]</code></li> </ul>"},{"location":"python/memento_python/#optional-union-literal","title":"Optional, Union, Literal","text":"<pre><code>from typing import Optional, Union, Literal\n\ndef maybe_add(a: int, b: Optional[int]) -&gt; int:\n    return a + (b or 0)\n</code></pre> <p>???+ note \"\ud83d\udd0d maybe_add explained\"</p> <ul> <li>b is optional, meaning it can be int or None (Optional[int])</li> <li>If b is None, use 0 instead</li> <li>If b is an integer (e.g., 5), use it</li> </ul> <pre><code>def handle_event(type: Union[str, int]) -&gt; None:\n    print(type)\n</code></pre> <p>???+ note \"\ud83d\udd0d handle_event explained\"</p> <ul> <li>type can be a str or an int</li> <li>The function returns nothing (None)</li> </ul> <pre><code>def status_color(status: Literal[\"ok\", \"error\", \"warning\"]) -&gt; str:\n    return {\"ok\": \"green\", \"error\": \"red\", \"warning\": \"yellow\"}[status]\n</code></pre> <p>???+ note \"\ud83d\udd0d status_color explained\" - <code>status: Literal[\"ok\", \"error\", \"warning\"]</code> restricts allowed values. - Helps prevent bugs by allowing only specific strings. - If you try another value, static checkers like <code>mypy</code> will raise an error.</p> <p>!!! attention \"Type Hints Are Static Only\"     Python does not enforce types at runtime.     Type hints are for developers, IDEs, and tools like <code>mypy</code> \u2014 they make your code safer and more readable but don\u2019t stop bad values at runtime unless you add validation.   </p>"},{"location":"python/memento_python/#typed-dicts","title":"Typed Dicts","text":"<pre><code>from typing import TypedDict\n\nclass Product(TypedDict):\n    id: int\n    price: float\n\ndef apply_discount(p: Product) -&gt; float:\n    return p[\"price\"] * 0.9\n</code></pre> <p>???+ note \"\ud83d\udd0d What is TypedDict?\" - TypedDict allows you to define the structure of a dictionary using class-like syntax. - It\u2019s perfect for describing JSON-like data, where keys and value types are known. - Fields are type-checked with tools like mypy, but at runtime it\u2019s still just a dict.</p>"},{"location":"python/memento_python/#namedtuples","title":"NamedTuples","text":"<pre><code>from typing import NamedTuple\n\nclass User(NamedTuple):\n    id: int\n    name: str\n</code></pre> <p>???+ note \"\ud83d\udd0d NamedTuple explained\"     - Combines tuple immutability with named fields and type hints.     - Values are positionally fixed and read-only.     - Supports dot notation: <code>user.name</code>, like an object.</p> <p>\u2705 Example:</p> <pre><code>user = User(id=1, name=\"Alice\")\nprint(user.name)  # \u279c Alice\n</code></pre> <ul> <li>\ud83d\udd12 NamedTuples are immutable \u2014 you can\u2019t do <code>user.name = \"Bob\"</code></li> </ul>"},{"location":"python/memento_python/#run-mypy-to-check","title":"Run <code>mypy</code> to Check","text":"<p>mypy scan a python file and report any type violations based on annotations (e.g., using TypedDict, List[int], etc.).</p> <pre><code>mypy script.py\n</code></pre> <ul> <li>It analyzes your code without running it.</li> <li>It checks if your type hints are correct.</li> <li>It helps prevent bugs early by catching issues like missing return types, wrong arguments, etc.</li> </ul> <p>We can add a config file <code>mypy.ini</code> to enforce rules, It tells mypy:</p> <ul> <li>How strict to be</li> <li>What files or modules to include/exclude</li> <li>Whether to allow missing type hints</li> <li>Whether to treat certain errors as warnings</li> <li>Project-specific overrides</li> </ul> <pre><code>[mypy]\nstrict = True                   # Enables all strict checks (recommended!)\nignore_missing_imports = True   # Don\u2019t fail on 3rd-party libraries with no stubs\ndisallow_untyped_defs = True    # Force you to type all function defs\nwarn_unused_ignores = True      # Warn if you ignore something unnecessarily\nexclude = tests/                # Don't type-check test files\n</code></pre>"},{"location":"python/memento_python/#pydantic-for-data-validation","title":"Pydantic for Data Validation","text":"<ul> <li>install latest pydantic v2 <code>pip install pydantic</code></li> </ul>"},{"location":"python/memento_python/#resources","title":"\ud83d\udd17 Resources","text":"<ul> <li>mypy Documentation</li> <li>PEP 484 \u2013 Type Hints</li> <li>Python Typing Cheatsheet ```</li> </ul>"},{"location":"sql/memento_sql/","title":"Memento SQL","text":""},{"location":"tdd/memento_tdd/","title":"Memento Test Drive Developement","text":""}]}