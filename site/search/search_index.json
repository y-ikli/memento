{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Accueil","text":""},{"location":"#about-this-website","title":"\ud83d\uddc2\ufe0f About This Website","text":"<p>This site serves as both a personal knowledge base \u2014 a memento of the technologies and tools I explore \u2014 and a portfolio showcasing selected projects I\u2019ve worked on or am currently developing.</p> <p>It reflects my ongoing learning journey, practical experience, and areas of technical interest, with the goal of deepening my understanding while making useful resources available to others.</p> <p>Please note: as some of my professional experiences involved sensitive environments where privacy and confidentiality are paramount, no proprietary data, internal resources, or privileged information are shared on this site.</p>"},{"location":"#about-me","title":"About me","text":"<p>Younes IKLI</p> <p></p> <p>My journey into technology began in 2007 with a deep fascination for GNU/Linux systems and the philosophy of free and open-source software.</p> <p>Driven to deepen my expertise, I undertook a rigorous academic path while working as a teacher. I earned a Bachelor's degree in Mathematics and Computer Science, a Master's in Computer Science Education (MEEF), and a Master's in Applied Data Science for Healthcare. These studies were complemented by 10 months of internships in data science and engineering, as well as a professional machine learning project in collaboration with CHU Lille and the Clinical Investigation Centre.</p> <p>This journey reflects not only my dedication to growth and continuous learning, but also the perseverance, adaptability, and technical curiosity that shape my professional mindset. I bring a strong sense of responsibility and a deep commitment to ethical and impactful work.</p>"},{"location":"#passion-becomes-profession","title":"Passion Becomes Profession","text":"<p>As an R&amp;D Engineer at the Inria Centre, University of Lille, I design scalable, privacy-aware data pipelines for federated learning research.</p>"},{"location":"#technical-skills","title":"\ud83d\udd27 Technical Skills","text":"<p>Programming: Python, SQL, Bash Data Engineering: Pandas, PySpark DevOps: Docker, GitLab CI Development Practices: Git, Clean Code, TDD</p>"},{"location":"#currently-expanding-skills-in","title":"\ud83d\udcda Currently Expanding Skills In:","text":"<ul> <li>Google Cloud Platform (GCP)</li> <li>dbt (Data Build Tool)</li> <li>Kubernetes</li> </ul>"},{"location":"#core-attributes","title":"\ud83c\udf1f Core Attributes","text":"<ul> <li>Growth Mindset: Focused on continuous improvement</li> <li>Responsibility: Strong commitment to accountability</li> <li>Confidentiality: Upholding data privacy and ethics</li> <li>Curiosity: Passionate about exploring new technologies</li> </ul> <p>\ud83d\udceb Contact Information</p> <ul> <li> <p>Email: younes.ikli@gmail.com </p> </li> <li> <p>Website: y-ikli.github.io/memento </p> </li> <li> <p>LinkedIn: linkedin.com/in/younes-ikli</p> </li> </ul> <p>Author : Younes IKLI  </p> <p>Last update : 2025-05-04T15:05:30Z</p>"},{"location":"clean_code/memento_clean_code/","title":"Memento Clean Code","text":"<p>Author : Younes IKLI Last update : 2025-05-04</p>"},{"location":"dbt/dbt/","title":"Dbt","text":"<p>Author : Younes IKLI Last update : 2025-05-04</p>"},{"location":"docker/memento_docker/","title":"Memento Docker","text":"<p>Author : Younes IKLI Last update : 2025-05-04</p>"},{"location":"git/memento_git/","title":"Git Tutorial &amp; Practical Use Cases","text":"<p>This tutorial provides a structured guide to Git, covering basic commands, advanced features, and practical scenarios commonly encountered in software development.</p>"},{"location":"git/memento_git/#table-of-contents","title":"\ud83d\udccb Table of Contents","text":"<ol> <li>Basic Setup</li> <li>Initializing &amp; Cloning Repositories</li> <li>Basic Workflow</li> <li>Branching &amp; Merging</li> <li>Working with Remote Repositories</li> <li>Undoing Changes</li> <li>Stashing Work</li> <li>Rebasing &amp; Fixing Commits</li> <li>Handling Merge Conflicts</li> <li>Tags &amp; Releases</li> <li>Inspecting &amp; Debugging</li> <li>Working with Multiple Repositories</li> <li>Practical Use Cases</li> </ol>"},{"location":"git/memento_git/#1-basic-setup","title":"1. Basic Setup","text":"<p>Before using Git, configure your name and email:</p> <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\n</code></pre> <p>Check your configuration:</p> <pre><code>git config --list\n</code></pre>"},{"location":"git/memento_git/#2-initializing-cloning-repositories","title":"2. Initializing &amp; Cloning Repositories","text":""},{"location":"git/memento_git/#initialize-a-new-repository","title":"Initialize a New Repository","text":"<pre><code>git init\n</code></pre> <p>Creates a new Git repository in the current directory.</p>"},{"location":"git/memento_git/#clone-an-existing-repository","title":"Clone an Existing Repository","text":"<pre><code>git clone &lt;repository_url&gt;\n</code></pre> <p>Copies a remote repository to your local machine.</p>"},{"location":"git/memento_git/#3-basic-workflow","title":"3. Basic Workflow","text":""},{"location":"git/memento_git/#check-status","title":"Check Status","text":"<pre><code>git status\n</code></pre> <p>Shows changed files and the current branch.</p>"},{"location":"git/memento_git/#add-changes-to-staging","title":"Add Changes to Staging","text":"<pre><code>git add &lt;file&gt;  # Add a specific file\ngit add .       # Add all changes\n</code></pre>"},{"location":"git/memento_git/#commit-changes","title":"Commit Changes","text":"<pre><code>git commit -m \"Commit message\"\n</code></pre> <p>Saves changes locally.</p>"},{"location":"git/memento_git/#view-commit-history","title":"View Commit History","text":"<pre><code>git log --oneline --graph --decorate --all\n</code></pre>"},{"location":"git/memento_git/#4-branching-merging","title":"4. Branching &amp; Merging","text":""},{"location":"git/memento_git/#create-a-new-branch","title":"Create a New Branch","text":"<pre><code>git branch new-feature\n</code></pre> <p>Creates a new branch called <code>new-feature</code>.</p>"},{"location":"git/memento_git/#switch-branch","title":"Switch Branch","text":"<pre><code>git switch new-feature\n</code></pre>"},{"location":"git/memento_git/#create-and-switch-to-a-new-branch","title":"Create and Switch to a New Branch","text":"<pre><code>git switch -c new-feature\n</code></pre>"},{"location":"git/memento_git/#push-the-new-branch-to-the-remote-repository","title":"Push the New Branch to the Remote Repository","text":"<p><pre><code>git push -u origin feature-xyz\n</code></pre> To avoid specifying -u on every push, configure Git to automatically set up tracking for new branches:</p> <p><pre><code>git config --global push.autoSetupRemote always\n</code></pre> With this configuration, after creating and switching to a new branch, you can simply use git push, and Git will automatically set up the upstream tracking. </p>"},{"location":"git/memento_git/#merge-branches","title":"Merge Branches","text":"<pre><code>git switch main\ngit merge new-feature\n</code></pre> <p>Merges <code>new-feature</code> into <code>main</code>.</p>"},{"location":"git/memento_git/#delete-a-branch","title":"Delete a Branch","text":"<pre><code>git branch -d new-feature\n</code></pre>"},{"location":"git/memento_git/#5-working-with-remote-repositories","title":"5. Working with Remote Repositories","text":""},{"location":"git/memento_git/#view-remote-repositories","title":"View Remote Repositories","text":"<pre><code>git remote -v\n</code></pre>"},{"location":"git/memento_git/#fetch-changes-from-remote","title":"Fetch Changes from Remote","text":"<pre><code>git fetch\n</code></pre>"},{"location":"git/memento_git/#pull-changes-fetch-merge","title":"Pull Changes (Fetch + Merge)","text":"<pre><code>git pull origin main\n</code></pre>"},{"location":"git/memento_git/#push-changes-to-remote","title":"Push Changes to Remote","text":"<pre><code>git push origin main\n</code></pre>"},{"location":"git/memento_git/#6-undoing-changes","title":"6. Undoing Changes","text":""},{"location":"git/memento_git/#undo-unstaged-changes","title":"Undo Unstaged Changes","text":"<pre><code>git checkout -- &lt;file&gt;\n</code></pre> <p>Resets a file to the last committed version.</p>"},{"location":"git/memento_git/#reset-staged-changes","title":"Reset Staged Changes","text":"<pre><code>git reset HEAD &lt;file&gt;\n</code></pre> <p>Removes file from staging but keeps changes.</p>"},{"location":"git/memento_git/#undo-last-commit-keep-changes","title":"Undo Last Commit (Keep Changes)","text":"<pre><code>git reset --soft HEAD~1\n</code></pre>"},{"location":"git/memento_git/#undo-last-commit-lose-changes","title":"Undo Last Commit (Lose Changes)","text":"<pre><code>git reset --hard HEAD~1\n</code></pre>"},{"location":"git/memento_git/#7-stashing-work","title":"7. Stashing Work","text":""},{"location":"git/memento_git/#save-uncommitted-changes","title":"Save Uncommitted Changes","text":"<pre><code>git stash\n</code></pre>"},{"location":"git/memento_git/#list-stashes","title":"List Stashes","text":"<pre><code>git stash list\n</code></pre>"},{"location":"git/memento_git/#restore-stashed-changes","title":"Restore Stashed Changes","text":"<pre><code>git stash pop\n</code></pre>"},{"location":"git/memento_git/#8-rebasing-fixing-commits","title":"8. Rebasing &amp; Fixing Commits","text":""},{"location":"git/memento_git/#rebase-a-branch","title":"Rebase a Branch","text":"<pre><code>git switch feature-branch\ngit rebase main\n</code></pre> <p>Applies <code>feature-branch</code> commits on top of <code>main</code>.</p>"},{"location":"git/memento_git/#squash-commits-interactive-rebase","title":"Squash Commits (Interactive Rebase)","text":"<pre><code>git rebase -i HEAD~3\n</code></pre> <p>Allows combining commits.</p>"},{"location":"git/memento_git/#amend-last-commit","title":"Amend Last Commit","text":"<pre><code>git commit --amend -m \"New commit message\"\n</code></pre>"},{"location":"git/memento_git/#9-handling-merge-conflicts","title":"9. Handling Merge Conflicts","text":"<p>When a conflict occurs:</p> <ol> <li>Git will show conflicting files. Open them and manually fix the conflicts.</li> <li>After resolving, stage the fixed files:</li> </ol> <pre><code>git add &lt;file&gt;\n</code></pre> <ol> <li>Continue the merge:</li> </ol> <pre><code>git merge --continue\n</code></pre> <p>or</p> <pre><code>git rebase --continue\n</code></pre>"},{"location":"git/memento_git/#10-tags-releases","title":"10. Tags &amp; Releases","text":""},{"location":"git/memento_git/#create-a-tag","title":"Create a Tag","text":"<pre><code>git tag -a v1.0 -m \"Version 1.0\"\n</code></pre>"},{"location":"git/memento_git/#push-tags-to-remote","title":"Push Tags to Remote","text":"<pre><code>git push origin --tags\n</code></pre>"},{"location":"git/memento_git/#delete-a-tag","title":"Delete a Tag","text":"<pre><code>git tag -d v1.0\ngit push origin --delete v1.0\n</code></pre>"},{"location":"git/memento_git/#11-inspecting-debugging","title":"11. Inspecting &amp; Debugging","text":""},{"location":"git/memento_git/#show-file-changes-in-a-commit","title":"Show File Changes in a Commit","text":"<pre><code>git show &lt;commit-hash&gt;\n</code></pre>"},{"location":"git/memento_git/#see-differences-between-branches","title":"See Differences Between Branches","text":"<pre><code>git diff main feature-branch\n</code></pre>"},{"location":"git/memento_git/#blame-find-who-changed-a-line","title":"Blame (Find Who Changed a Line)","text":"<pre><code>git blame &lt;file&gt;\n</code></pre>"},{"location":"git/memento_git/#12-working-with-multiple-repositories","title":"12. Working with Multiple Repositories","text":""},{"location":"git/memento_git/#add-a-new-remote-repository","title":"Add a New Remote Repository","text":"<pre><code>git remote add upstream &lt;repo-url&gt;\n</code></pre>"},{"location":"git/memento_git/#fetch-and-merge-from-another-repository","title":"Fetch and Merge from Another Repository","text":"<pre><code>git fetch upstream\ngit merge upstream/main\n</code></pre>"},{"location":"git/memento_git/#13-practical-use-cases","title":"13. Practical Use Cases","text":""},{"location":"git/memento_git/#collaborative-feature-development","title":"Collaborative Feature Development","text":"<p>Scenario: Multiple developers are working on different aspects of a new feature.</p> <p>Solution:</p> <ol> <li>Create a Feature Branch:</li> </ol> <pre><code>git checkout -b feature-branch\n</code></pre> <ol> <li>Push the Branch to Remote:</li> </ol> <pre><code>git push -u origin feature-branch\n</code></pre> <ol> <li>Developers Work on Their Parts:</li> </ol> <p>Each developer pulls the branch and commits their changes.</p> <ol> <li>Merge Feature Branch into Main:</li> </ol> <pre><code>git checkout main\ngit merge feature-branch\n</code></pre>"},{"location":"git/memento_git/#managing-diverged-branches","title":"Managing Diverged Branches","text":"<p>Scenario: Your local branch and the remote branch have diverged.</p> <p>Solution:</p> <ol> <li>Fetch Latest Changes:</li> </ol> <pre><code>git fetch origin\n</code></pre> <ol> <li>Rebase Your Changes:</li> </ol> <pre><code>git rebase origin/main\n</code></pre> <p>Resolve any conflicts and continue:</p> <pre><code>git add &lt;resolved-files&gt;\ngit rebase --continue\n</code></pre>"},{"location":"git/memento_git/#cleaning-up-commit-history","title":"Cleaning Up Commit History","text":"<p>Scenario: You have multiple small commits that you want to combine into one.</p> <p>Solution:</p> <ol> <li>Interactive Rebase:</li> </ol> <pre><code>git rebase -i HEAD~n\n</code></pre> <p>Replace <code>n</code> with the number of commits to review.</p> <ol> <li>In the Editor:</li> </ol> <p>Change <code>pick</code> to <code>squash</code> for commits you want to combine.</p> <ol> <li>Finalize Commit Message:</li> </ol> <p>Edit the commit message as desired, then save and exit.</p>"},{"location":"git/memento_git/#undoing-changes","title":"Undoing Changes","text":"<p>Scenario: You want to discard changes or reset files.</p> <p>Solutions:</p> <ul> <li>Discard Changes in Working Directory:</li> </ul> <pre><code>git checkout -- &lt;file&gt;\n</code></pre> <ul> <li>Unstage a File:</li> </ul> <pre><code>git reset HEAD &lt;file&gt;\n</code></pre> <ul> <li>Reset to a Previous Commit:</li> </ul> <pre><code>git reset --hard &lt;commit-hash&gt;\n</code></pre> <p>Caution: This will erase uncommitted changes.</p>"},{"location":"git/memento_git/#using-git-tags-for-releases","title":"Using Git Tags for Releases","text":"<p>Scenario: Marking a specific commit as a release point.</p> <p>Solution:</p> <ol> <li>Create a Tag:</li> </ol> <pre><code>git tag -a v1.0 -m \"Release version 1.0\"\n</code></pre> <ol> <li>Push Tags to Remote:</li> </ol> <pre><code>git push origin v1.0\n</code></pre>"},{"location":"git/memento_git/#cherry-picking-specific-commits","title":"Cherry-Picking Specific Commits","text":"<p>Scenario: Apply a specific commit from one branch to another.</p> <p>Solution:</p> <ol> <li>Checkout Target Branch:</li> </ol> <pre><code>git checkout main\n</code></pre> <ol> <li>Cherry-Pick Commit:</li> </ol> <pre><code>git cherry-pick &lt;commit-hash&gt;\n</code></pre>"},{"location":"git/memento_git/#finding-bug-introducing-commits","title":"Finding Bug-Introducing Commits","text":"<p>Scenario: Identify the commit that introduced a bug.</p> <p>Solution:</p> <ol> <li>Start Bisect:</li> </ol> <pre><code>git bisect start\ngit bisect bad   # Current commit is bad\ngit bisect good &lt;commit-hash&gt;   # Known good commit\n</code></pre> <ol> <li>Test Commits:</li> </ol> <p>Git will checkout commits between good and bad. Test each and mark as good or bad:</p> <pre><code>git bisect good\n# or\ngit bisect bad\n</code></pre> <ol> <li>Reset Bisect:</li> </ol> <pre><code>git bisect reset\n</code></pre>"},{"location":"git/memento_git/#working-with-submodules","title":"Working with Submodules","text":"<p>Scenario: Include another Git repository within your project.</p> <p>Solution:</p> <ol> <li>Add Submodule:</li> </ol> <pre><code>git submodule add https://github.com/example/repo.git path/to/submodule\n</code></pre> <ol> <li>Initialize and Update Submodules:</li> </ol> <pre><code>git submodule update --init --recursive\n</code></pre> <ol> <li>Cloning Repository with Submodules:</li> </ol> <pre><code>git clone --recursive https://github.com/your/repo.git\n</code></pre>"},{"location":"git/memento_git/#tips-tricks","title":"Tips &amp; Tricks","text":""},{"location":"git/memento_git/#recovering-from-mistakes","title":"Recovering from Mistakes","text":"<p>Scenario: You made a mistake and need to revert to a previous state.</p> <p>Solution:</p> <pre><code>git reflog\n# Find the commit before the mistake\ngit reset --hard HEAD@{index}\n</code></pre>"},{"location":"git/memento_git/#amending-the-last-commit","title":"Amending the Last Commit","text":"<p>Scenario: You want to modify the last commit.</p> <p>Solution:</p> <pre><code># Make your changes\ngit add .\ngit commit --amend\n</code></pre> <p>Note: Avoid amending commits that have been pushed to shared branches.</p> <p>End of Tutorial</p> <p>Author : Younes IKLI Last update : 2025-05-04</p>"},{"location":"python/memento_python/","title":"Memento Python","text":"<p>This memento summarizes some native Python features.</p>"},{"location":"python/memento_python/#type-hints-static-checking","title":"Type Hints &amp; Static Checking","text":"<p>Type hints help document your code and catch bugs early. Combined with tools like <code>mypy</code>, they enable static analysis without running the code.</p> <p>Basic Type Hints</p> <pre><code>def double(x: int) -&gt; int:\n    return x * 2\n\ndef greet(name: str) -&gt; str:\n    return f\"Hello, {name}\"\n</code></pre> <p>Hints for Collections</p> <p><pre><code>from typing import List, Dict\n\ndef total(prices: List[float]) -&gt; float:\n    return sum(prices)\n\ndef extract_ids(data: List[Dict[str, int]]) -&gt; List[int]:\n    return [row[\"id\"] for row in data]\n</code></pre> - In first example prices are a list of floats. - In the second example, data is expected to be a list of dictionaries.Each dictionary maps strings to integers  This means you expect something like: <code>[{\"id\": 1}, {\"id\": 2}, {\"id\": 3}]</code></p> <p>Optional, Union, Literal</p> <p><pre><code>from typing import Optional, Union, Literal\n\ndef maybe_add(a: int, b: Optional[int]) -&gt; int:\n    return a + (b or 0)\n</code></pre> - b is optional, meaning it can be int or None (Optional[int]) - If b is None, use 0 instead - If b is an integer (e.g., 5), use it</p> <p><pre><code>def handle_event(type: Union[str, int]) -&gt; None:\n    print(type)\n</code></pre> - type can be a str or an int - The function returns nothing (None)</p> <p><pre><code>def status_color(status: Literal[\"ok\", \"error\", \"warning\"]) -&gt; str:\n    return {\"ok\": \"green\", \"error\": \"red\", \"warning\": \"yellow\"}[status]\n</code></pre> - <code>status: Literal[\"ok\", \"error\", \"warning\"]</code> restricts allowed values. - Helps prevent bugs by allowing only specific strings. - If you try another value, static checkers like <code>mypy</code> will raise an error.</p> <p>Other Special Types</p> <ul> <li><code>Any</code>: Indicates that a value can be of any type.</li> <li><code>Callable[[Arg1Type, Arg2Type], ReturnType]</code>: Represents a function or any other callable object with the specified argument types and return type.</li> <li><code>TypeVar</code>: Used for creating generic types.</li> </ul> <p>Type Hints Are Static Only</p> <p>Python does not enforce types at runtime. Type hints are for developers, IDEs, and tools like <code>mypy</code> \u2014 they make your code safer and more readable but don\u2019t stop bad values at runtime unless you add validation.   </p>"},{"location":"python/memento_python/#typeddict","title":"TypedDict","text":"<p><pre><code>from typing import TypedDict\n\nclass Product(TypedDict):\n    id: int\n    price: float\n\ndef apply_discount(p: Product) -&gt; float:\n    return p[\"price\"] * 0.9\n</code></pre> - TypedDict allows you to define the structure of a dictionary using class-like syntax. - It\u2019s perfect for describing JSON-like data, where keys and value types are known. - Fields are type-checked with tools like mypy, but at runtime it\u2019s still just a dict.</p>"},{"location":"python/memento_python/#namedtuples","title":"NamedTuples","text":"<p><pre><code>from typing import NamedTuple\n\nclass User(NamedTuple):\n    id: int\n    name: str\n</code></pre> - Combines tuple immutability with named fields and type hints. - Values are positionally fixed and read-only. - Supports dot notation: <code>user.name</code>, like an object.</p> <p>\u2705 Example: <pre><code>user = User(id=1, name=\"Alice\")\nprint(user.name)  # \u279c Alice\n</code></pre> - \ud83d\udd12 NamedTuples are immutable \u2014 you can\u2019t do <code>user.name = \"Bob\"</code></p>"},{"location":"python/memento_python/#mypy","title":"mypy","text":"<p>mypy scan a python file and report any type violations based on annotations (e.g., using TypedDict, List[int], etc.). <pre><code>mypy script.py\n</code></pre> - It analyzes your code without running it. - It checks if your type hints are correct. - It helps prevent bugs early by catching issues like missing return types, wrong arguments, etc.</p>"},{"location":"python/memento_python/#pydantic","title":"Pydantic","text":"<p>Pydantic is a library that uses Python type hints to enforce data structure and validate inputs at runtime. Why use Pydantic? - Enforces types at runtime - Converts compatible types (e.g., str \u279c int) - Raises clear validation errors on failure</p> <p>Basic Model:</p> <pre><code>from pydantic import BaseModel\n\nclass User(BaseModel):\n    id: int\n    name: str\n    is_active: bool = True\n</code></pre> <p>\u2705 Example: <pre><code>user = User(id=\"123\", name=\"Alice\")\nprint(user.id)  # \u279c 123 (auto-converted to int)\n</code></pre> Field Constraints:</p> <ul> <li>Field Constraints with Field(...) in Pydantic</li> <li>Use Field(...) to add validation rules on fields \u2014 like minimum length or positive values.</li> <li>This helps automatically enforce clean and correct data. \u2705 Example:</li> </ul> <p><pre><code>from pydantic import BaseModel, Field\n\nclass Product(BaseModel):    \n    name: str = Field(..., min_length=2)  # Name must have at least 2 characters\n    price: float = Field(..., gt=0)       # Price must be greater than 0\n</code></pre> \u2705 Valid input Product(name=\"Laptop\", price=1000.0)</p> <p>\u274c Invalid input (raises ValidationError) Product(name=\"A\", price=-10)</p> <ul> <li><code>min_length=2</code>: name must be at least 2 characters</li> <li><code>gt=0</code>: price must be greater than 0</li> <li><code>Field(...)</code>: required with constraints same as <code>Field(required=True)</code></li> </ul> <p>Nested Models Pydantic models can contain other Pydantic models as fields. This is powerful when working with structured or hierarchical data \u2014 like JSON from APIs.</p> <pre><code>class Address(BaseModel):\n    city: str\n    country: str\n\nclass Customer(BaseModel):\n    name: str\n    address: Address\n</code></pre> <p>\u2705 Example: <pre><code>cust = Customer(name=\"Bob\", address={\"city\": \"Paris\", \"country\": \"FR\"})\n</code></pre></p>"},{"location":"python/memento_python/#python-documentation-generator","title":"Python Documentation Generator","text":"<p><code>Pyment</code> is a simple tool for generating and enhancing docstrings in Python. It supports multiple formats, including Google, NumPy, and reST.  First, install Pyment using <code>pip</code>:</p> <p><pre><code>pip install pyment\n</code></pre> To generate and initialize docstrings for your Python file(with google format), run the following command: <code>pyment --init --format google &lt;your-python-file.py&gt;</code></p> <p>Generating Docstrings for Classes Pyment can also generate docstrings for Python classes.</p> <p><code>pyment --init --class &lt;your-python-file.py&gt;</code></p> <p>Generate Docstrings for Entire Project You can also generate docstrings for an entire project (all Python files) using Pyment.</p> <p><code>pyment --init --all</code> This command will go through all Python files in the current directory and generate docstrings for functions, methods, and classes.</p>"},{"location":"python/memento_python/#match","title":"match","text":"<p>match statement: It\u2019s used to match a value (expression) against several patterns.</p> <p>Patterns: These are conditions that specify what data to match, such as literal values, variable bindings, and complex patterns (like sequences, mappings, or classes).</p> <p>Basic Syntax:</p> <p><pre><code>match value:\n    case pattern1:\n        # code if value matches pattern1\n    case pattern2:\n        # code if value matches pattern2\n    case _:\n        # code for any other case (wildcard)\n</code></pre> Why Use match Over if-elif? - Readability: match provides a clean, concise way to handle complex data structures and patterns. - Flexibility: Supports powerful features like guards, destructuring, and multiple pattern matching. - Maintainability: It's easier to extend and modify as the logic is more declarative and expressive than if-elif. - In summary, match is a modern and robust alternative to if-elif chains for pattern matching, offering clearer, more maintainable code when working with complex data types.</p> <pre><code>def traiter_message(message):\n    match message:\n        case {'type': 'texte', 'contenu': contenu}:  # Correspond au dictionnaire avec les cl\u00e9s 'type' et 'contenu'\n            print(f\"Message texte re\u00e7u: {contenu}\")\n        case {'type': 'image', 'url': url}:  # Correspond au dictionnaire avec les cl\u00e9s 'type' et 'url'\n            print(f\"Image re\u00e7ue: {url}\")\n        case {'type': 'video', 'url': url, 'dur\u00e9e': dur\u00e9e}:  # Correspond au dictionnaire avec les cl\u00e9s 'type', 'url', et 'dur\u00e9e'\n            print(f\"Vid\u00e9o re\u00e7ue: {url}, dur\u00e9e: {dur\u00e9e} secondes\")\n        case _:\n            print(\"Type de message inconnu\")\n</code></pre>"},{"location":"python/memento_python/#map-and-reduce","title":"Map and Reduce","text":"<p><code>map()</code> and <code>reduce()</code> are functional programming tools in Python that allow concise transformation and aggregation of data collections.</p> <p>\ud83d\udd39 <code>map(func, iterable)</code></p> <ul> <li>Applies a function to each item in an iterable.</li> <li>Returns a new iterable (<code>map</code> object), often converted to a list.</li> </ul> <p>Example with a Named Function: <pre><code>def square(x: int) -&gt; int:\n    return x * x\n\nnums = [1, 2, 3, 4]\nsquares = list(map(square, nums))\nprint(squares)  # \u279c [1, 4, 9, 16]\n#example with Lambda function\nsquares = list(map(lambda x: x**2, nums))\nprint(squares)  # \u279c [1, 4, 9, 16]\n</code></pre></p>"},{"location":"python/memento_python/#decorators","title":"Decorators","text":"<p>A decorator is a special type of function in Python that allows you to \"decorate\" or modify another function (or method) without changing its actual code. It allows you to add functionality to an existing function in a clean, readable way. <pre><code>def my_decorator(func):\n    def wrapper():\n        print(\"Something is happening before the function is called.\")\n        func()\n        print(\"Something is happening after the function is called.\")\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print(\"Hello!\")\n</code></pre> Common Built-in Decorators Python provides a few built-in decorators that are commonly used. Here are some examples:</p> <p>a. @staticmethod A staticmethod is a method that belongs to the class but doesn't require an instance of the class to be called. It does not have access to self (instance) or cls (class). <pre><code>class MyClass:\n    @staticmethod\n    def say_hello():\n        print(\"Hello from a static method!\")\n</code></pre></p> <p>b. @classmethod A classmethod is a method that works with the class itself rather than instances. It takes cls as the first argument, which refers to the class. <pre><code>class MyClass:\n    @classmethod\n    def say_hello(cls):\n        print(f\"Hello from {cls}!\")\n</code></pre> c. @property The @property decorator turns a method into a read-only property. Instead of calling it like a method, you access it like an attribute. <pre><code>class MyClass:\n    def __init__(self, x):\n        self._x = x\n\n    @property\n    def x(self):\n        return self._x\n</code></pre> Author : Younes IKLI  </p> <p>Last update : 2025-05-04T16:34:46Z</p>"},{"location":"spark/spark/","title":"Spark","text":"<p>Author : Younes IKLI Last update : 2025-05-04</p>"},{"location":"sql/memento_sql/","title":"Memento SQL","text":"<p>Author : Younes IKLI Last update : 2025-05-04</p>"},{"location":"tdd/memento_tdd/","title":"Memento Test Drive Developement","text":"<p>Author : Younes IKLI Last update : 2025-05-04</p>"}]}